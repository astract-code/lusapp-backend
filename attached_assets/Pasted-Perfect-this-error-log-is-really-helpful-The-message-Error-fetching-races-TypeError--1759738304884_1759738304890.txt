Perfect ‚Äî this error log is really helpful.

The message:

```
Error fetching races: TypeError: data.map is not a function (it is undefined)
```

means that the variable `data` inside your `fetchRaces` function is **not an array**, so JavaScript can‚Äôt run `.map()` on it.

---

### üß≠ What‚Äôs happening

You probably have something like this inside `AppContext.js`:

```js
const fetchRaces = async () => {
  try {
    const response = await fetch(RACES_URL);
    const data = await response.json();
    const formattedRaces = data.map(race => ({
      ...race,
      // formatting logic
    }));
    set({ races: formattedRaces, isLoading: false });
  } catch (error) {
    console.error('Error fetching races:', error);
    set({ isLoading: false });
  }
};
```

If `data.map` is failing, it means `data` is **not an array** ‚Äî most likely it‚Äôs:

* `undefined` (network issue or bad URL)
* an **object**, like `{ races: [...] }`
* or the **API returned an error message** instead of race data

---

### ‚úÖ How to fix it safely

Change your code to **validate** what `data` actually is before calling `.map()`:

```js
const fetchRaces = async () => {
  try {
    const response = await fetch(RACES_URL);
    const data = await response.json();

    // Log what came back (you‚Äôll see this in Expo‚Äôs terminal)
    console.log('Fetched data:', data);

    // Handle if the data is wrapped (like { races: [...] })
    const racesArray = Array.isArray(data)
      ? data
      : Array.isArray(data?.races)
      ? data.races
      : [];

    if (racesArray.length === 0) {
      console.warn('‚ö†Ô∏è No races found or data format unexpected.');
    }

    const formattedRaces = racesArray.map(race => ({
      ...race,
      // whatever formatting you do here
    }));

    set({ races: formattedRaces, isLoading: false });
  } catch (error) {
    console.error('Error fetching races:', error);
    set({ isLoading: false });
  }
};
```

---

### üß© Why this helps

Now your app won‚Äôt crash even if:

* the fetch fails,
* the data format changes,
* or the JSON file wraps your races in an object.

Instead, it‚Äôll log the unexpected format so you can adjust later.

---

### üîç Next step (debugging tip)

Run your app again and look at the **console output** in Replit or Expo Go logs.

You‚Äôll see something like:

```
Fetched data: { races: [ {name: "Ironman 70.3"}, ... ] }
```

Then you‚Äôll know if you need to change:

```js
const racesArray = data.races;
```

or

```js
const racesArray = data;
```

---

If you want, upload (or paste) a short snippet of what your **JSON or CSV-converted race data looks like**, and I‚Äôll tell you the exact `.map()` fix needed for your structure.
